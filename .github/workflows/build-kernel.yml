name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v4
    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
        CONFIG_LIST=(
            KERNEL_SOURCE
            KERNEL_SOURCE_BRANCH
            KERNEL_CONFIG
            KERNEL_IMAGE_NAME
            ARCH
            ADD_LOCALVERSION_TO_FILENAME
            EXTRA_CMDS
            USE_CUSTOM_CLANG
            CUSTOM_CLANG_SOURCE
            CUSTOM_CLANG_BRANCH
            CUSTOM_CMDS
            CLANG_BRANCH
            CLANG_VERSION
            ENABLE_GCC_ARM64
            ENABLE_GCC_ARM32
            USE_CUSTOM_GCC_64
            CUSTOM_GCC_64_SOURCE
            CUSTOM_GCC_64_BRANCH
            CUSTOM_GCC_64_BIN
            USE_CUSTOM_GCC_32
            CUSTOM_GCC_32_SOURCE
            CUSTOM_GCC_32_BRANCH
            CUSTOM_GCC_32_BIN
            ENABLE_KERNELSU
            KERNELSU_TAG
            ADD_KPROBES_CONFIG
            DISABLE-LTO
            ADD_OVERLAYFS_CONFIG
            DISABLE_CC_WERROR
            APPLY_KSU_PATCH
            USE_CUSTOM_ANYKERNEL3
            CUSTOM_ANYKERNEL3_SOURCE
            CUSTOM_ANYKERNEL3_BRANCH
            ENABLE_CCACHE
            NEED_DTBO
            BUILD_BOOT_IMG
            SOURCE_BOOT_IMAGE
            KSU_EXPECTED_SIZE
            KSU_EXPECTED_HASH
            REMOVE_UNUSED_PACKAGES
        )

        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            else
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            fi
        done

    - name: Remove unused packages
      if: env.REMOVE_UNUSED_PACKAGES == 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: ture
        android: false
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: false

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download Clang-aosp
      if: env.USE_CUSTOM_CLANG != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

    - name: Download Custom-Clang
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_CLANG_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_CLANG_SOURCE }} == *'.tar.gz' ]]; then
                wget -O clang.tar.gz ${{ env.CUSTOM_CLANG_SOURCE }}
                mkdir clang-aosp
                tar -C clang-aosp/ -zxvf clang.tar.gz
            else
                git clone ${{ env.CUSTOM_CLANG_SOURCE }} -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
            fi
        else
            wget -O clang.zip ${{ env.CUSTOM_CLANG_SOURCE }}
            mkdir clang-aosp
            unzip clang.zip -d clang-aosp/
        fi

    - name: Download Gcc-aosp
      if: env.USE_CUSTOM_GCC_64 != 'true' || env.USE_CUSTOM_GCC_32 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
            mkdir gcc-64
            wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        fi

        if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
            mkdir gcc-32
            wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-32/ -zxvf gcc-arm.tar.gz
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
        fi

    - name: Download Custom-Gcc
      if: env.USE_CUSTOM_GCC_64 == 'true' || env.USE_CUSTOM_GCC_32 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.USE_CUSTOM_GCC_64 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-64.tar.gz ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
              fi
          else
              wget -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/${{ env.CUSTOM_GCC_64_BIN }}" >> $GITHUB_ENV
        fi

        if [ ${{ env.USE_CUSTOM_GCC_32 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-32.tar.gz ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -zxvf gcc-32.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
              fi
          else
            wget -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
            mkdir gcc-32
            unzip gcc-32.zip -d gcc-32/
          fi
          echo "GCC_32=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/${{ env.CUSTOM_GCC_32_BIN }}" >> $GITHUB_ENV
        fi

    - name: Download mkbootimg tools
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
        if [[ ${{ env.ADD_LOCALVERSION_TO_FILENAME }} == 'true' ]]; then
          echo "LOCALVERSION=$(cat android-kernel/localversion)" >> $GITHUB_ENV
        else
          echo "LOCALVERSION=" >> $GITHUB_ENV
        fi

    - name: Download source boot image
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi

    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KernelSU_$KSU_VERSION" >> $GITHUB_ENV

    - name: Setup Configuration for Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        if [ ${{ env.APPLY_KSU_PATCH }} = true ]; then
            bash $GITHUB_WORKSPACE/patches/patches.sh
            if grep -q "CONFIG_KSU" arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}; then
                sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
                sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            else
                echo "CONFIG_KSU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            fi
        fi
        if [ ${{ env.ADD_KPROBES_CONFIG }} = true -a ${{ env.APPLY_KSU_PATCH }} != true ]; then
            echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
            echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE-LTO }} = true ]; then
            sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
            echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi

    - name: Setup ccache
      if: env.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Setup Kernel Source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # 处理 sched_assist
        echo "Setting up sched_assist..."
        sudo rm -rf kernel/sched_assist || true
        sudo mkdir -p kernel/sched_assist || true
        sudo chown -R runner:docker kernel/sched_assist
        sudo chmod -R 755 kernel/sched_assist
        
        sudo tee kernel/sched_assist/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS scheduler assist configuration
        #
        
        config OPLUS_FEATURE_SCHED_ASSIST
          bool "OPLUS scheduler assist"
          default n
          help
            Enable scheduler assist feature for OPLUS device.
            Including ui thread scheduling optimization,
            render thread scheduling optimization and
            animation optimization.
        EOF
        
        sudo chmod 644 kernel/sched_assist/Kconfig
        
        # 处理 klockopt
        echo "Setting up klockopt..."
        sudo rm -rf kernel/locking/klockopt || true
        sudo mkdir -p kernel/locking/klockopt || true
        sudo chown -R runner:docker kernel/locking/klockopt
        sudo chmod -R 755 kernel/locking/klockopt
        
        sudo tee kernel/locking/klockopt/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS klockopt configuration
        #
        
        config OPLUS_FEATURE_KLOCKOPT
          bool "OPLUS kernel lock optimization"
          default n
          help
            Enable kernel lock optimization feature for OPLUS device.
            This option provides optimizations for kernel locking
            mechanisms to improve performance.
        EOF
        
        sudo chmod 644 kernel/locking/klockopt/Kconfig
        
        # 处理 foreground_io_opt
        echo "Setting up foreground_io_opt..."
        sudo rm -rf block/foreground_io_opt || true
        sudo mkdir -p block/foreground_io_opt || true
        sudo chown -R runner:docker block/foreground_io_opt
        sudo chmod -R 755 block/foreground_io_opt
        
        sudo tee block/foreground_io_opt/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS foreground I/O optimization configuration
        #
        
        config OPLUS_FEATURE_FG_IO_OPT
          bool "OPLUS foreground I/O optimization"
          default n
          help
            Enable foreground I/O optimization feature for OPLUS device.
            This option provides optimizations for I/O operations
            to improve foreground application performance.
        EOF
        
        sudo chmod 644 block/foreground_io_opt/Kconfig
        
        # 处理 malloc_track
        echo "Setting up malloc_track..."
        sudo rm -rf mm/malloc_track || true
        sudo mkdir -p mm/malloc_track || true
        sudo chown -R runner:docker mm/malloc_track
        sudo chmod -R 755 mm/malloc_track
        
        sudo tee mm/malloc_track/Kconfig.compat > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS malloc track configuration
        #
        
        config OPLUS_FEATURE_MALLOC_TRACK
          bool "OPLUS malloc tracking"
          default n
          help
            Enable malloc tracking feature for OPLUS device.
            This option provides memory allocation tracking
            for debugging memory leaks and usage patterns.
        EOF
        
        sudo chmod 644 mm/malloc_track/Kconfig.compat
        
        # 处理 task_mem
        echo "Setting up task_mem..."
        sudo rm -rf mm/task_mem || true
        sudo mkdir -p mm/task_mem || true
        sudo chown -R runner:docker mm/task_mem
        sudo chmod -R 755 mm/task_mem
        
        sudo tee mm/task_mem/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS task memory configuration
        #
        
        config OPLUS_FEATURE_TASK_MEM
          bool "OPLUS task memory tracking"
          default n
          help
            Enable task memory tracking feature for OPLUS device.
            This option provides per-task memory usage tracking
            and analysis capabilities.
        EOF
        
        sudo chmod 644 mm/task_mem/Kconfig
        
        # 处理 multi_kswapd
        echo "Setting up multi_kswapd..."
        sudo rm -rf mm/multi_kswapd || true
        sudo mkdir -p mm/multi_kswapd || true
        sudo chown -R runner:docker mm/multi_kswapd
        sudo chmod -R 755 mm/multi_kswapd
        
        sudo tee mm/multi_kswapd/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS multi kswapd configuration
        #
        
        config OPLUS_FEATURE_MULTI_KSWAPD
          bool "OPLUS multi kswapd support"
          default n
          help
            Enable multiple kswapd threads support for OPLUS device.
            This option allows running multiple kernel swap daemons
            to improve memory reclaim performance.
        EOF
        
        sudo chmod 644 mm/multi_kswapd/Kconfig
        
        # 处理 healthinfo
        echo "Setting up healthinfo..."
        sudo rm -rf mm/healthinfo || true
        sudo mkdir -p mm/healthinfo || true
        sudo chown -R runner:docker mm/healthinfo
        sudo chmod -R 755 mm/healthinfo
        
        sudo tee mm/healthinfo/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS healthinfo configuration
        #
        
        config OPLUS_FEATURE_HEALTHINFO
          bool "OPLUS healthinfo support"
          default n
          help
            Enable healthinfo feature for OPLUS device.
            This option provides system health monitoring
            and diagnostic capabilities.
        EOF
        
        sudo chmod 644 mm/healthinfo/Kconfig
        
        # 处理 oplus_modules
        echo "Setting up oplus_modules..."
        sudo rm -rf net/oplus_modules || true
        sudo mkdir -p net/oplus_modules || true
        sudo chown -R runner:docker net/oplus_modules
        sudo chmod -R 755 net/oplus_modules
        
        sudo tee net/oplus_modules/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS network modules configuration
        #
        
        config OPLUS_FEATURE_WIFI_SLA
          bool "OPLUS WiFi SLA support"
          default n
          help
            Enable WiFi SLA (Service Level Agreement) feature.
            This option provides WiFi quality monitoring and
            optimization capabilities.
            
        config OPLUS_FEATURE_WIFI_OPLUSWFD
          bool "OPLUS WiFi Display support"
          default n
          help
            Enable OPLUS WiFi Display feature.
            This option provides enhanced WiFi display
            functionality for better user experience.
            
        config OPLUS_FEATURE_WIFI_MTUDETECT
          bool "OPLUS WiFi MTU detection"
          default n
          help
            Enable WiFi MTU detection feature.
            This option helps optimize network packet size
            for better network performance.
        EOF
        
        sudo chmod 644 net/oplus_modules/Kconfig
        
        # 处理 kernelFwUpdate
        echo "Setting up kernelFwUpdate..."
        sudo rm -rf drivers/base/kernelFwUpdate || true
        sudo mkdir -p drivers/base/kernelFwUpdate || true
        sudo chown -R runner:docker drivers/base/kernelFwUpdate
        sudo chmod -R 755 drivers/base/kernelFwUpdate
        
        sudo tee drivers/base/kernelFwUpdate/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS kernel firmware update configuration
        #
        
        config OPLUS_FEATURE_KERNEL_FW_UPDATE
          bool "OPLUS kernel firmware update support"
          default n
          help
            Enable kernel firmware update feature for OPLUS device.
            This option provides mechanisms for updating various
            firmware components through the kernel.
        EOF
        
        sudo chmod 644 drivers/base/kernelFwUpdate/Kconfig
        
        # 处理所有传感器目录
        echo "Setting up sensor directories..."
        sudo rm -rf drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor || true
        sudo mkdir -p drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/{camera_protecthub,free_fallhub,pickup_detecthub,fp_displayhub,lux_aodhub,pedo_minutehub,oplus_activity_recognitionhub,tp_gesturehub,elevator_detecthub} || true
        
        # 设置权限
        sudo chown -R runner:docker drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor
        sudo chmod -R 755 drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor
        
        # 创建 camera_protecthub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/camera_protecthub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS camera protect sensor configuration
        #
        
        config OPLUS_FEATURE_CAMERA_PROTECT
          bool "OPLUS camera protect sensor"
          default n
          help
            Enable camera protect sensor support for OPLUS device.
            This option provides camera protection features
            through sensor monitoring and detection.
        EOF
        
        # 创建 free_fallhub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/free_fallhub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS free fall sensor configuration
        #
        
        config OPLUS_FEATURE_FREE_FALL
          bool "OPLUS free fall sensor"
          default n
          help
            Enable free fall sensor support for OPLUS device.
            This option provides free fall detection features
            through sensor monitoring and detection.
        EOF
        
        # 创建 pickup_detecthub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/pickup_detecthub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS pickup detect sensor configuration
        #
        
        config OPLUS_FEATURE_PICKUP_DETECT
          bool "OPLUS pickup detect sensor"
          default n
          help
            Enable pickup detect sensor support for OPLUS device.
            This option provides pickup detection features
            through sensor monitoring and detection.
        EOF
        
        # 创建 fp_displayhub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/fp_displayhub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS fingerprint display sensor configuration
        #
        
        config OPLUS_FEATURE_FP_DISPLAY
          bool "OPLUS fingerprint display sensor"
          default n
          help
            Enable fingerprint display sensor support for OPLUS device.
            This option provides fingerprint display detection features
            through sensor monitoring and detection.
        EOF
        
        # 创建 lux_aodhub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/lux_aodhub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS AOD light sensor configuration
        #
        
        config OPLUS_FEATURE_LUX_AOD
          bool "OPLUS AOD light sensor"
          default n
          help
            Enable AOD light sensor support for OPLUS device.
            This option provides ambient light detection features
            for Always-On Display functionality.
        EOF
        
        # 创建 pedo_minutehub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/pedo_minutehub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS pedometer minute sensor configuration
        #
        
        config OPLUS_FEATURE_PEDO_MINUTE
          bool "OPLUS pedometer minute sensor"
          default n
          help
            Enable pedometer minute sensor support for OPLUS device.
            This option provides step counting features with
            minute-level precision for fitness tracking.
        EOF
        
        # 创建 oplus_activity_recognitionhub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/oplus_activity_recognitionhub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS activity recognition sensor configuration
        #
        
        config OPLUS_FEATURE_ACTIVITY_RECOGNITION
          bool "OPLUS activity recognition sensor"
          default n
          help
            Enable activity recognition sensor support for OPLUS device.
            This option provides activity detection and recognition
            features through sensor fusion and analysis.
        EOF
        
        # 创建 tp_gesturehub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/tp_gesturehub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS touchpanel gesture sensor configuration
        #
        
        config OPLUS_FEATURE_TP_GESTURE
          bool "OPLUS touchpanel gesture sensor"
          default n
          help
            Enable touchpanel gesture sensor support for OPLUS device.
            This option provides touchpanel gesture detection features
            for enhanced user interaction capabilities.
        EOF
        
        # 创建 elevator_detecthub 配置
        sudo tee drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/elevator_detecthub/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS elevator detect sensor configuration
        #
        
        config OPLUS_FEATURE_ELEVATOR_DETECT
          bool "OPLUS elevator detect sensor"
          default n
          help
            Enable elevator detection sensor support for OPLUS device.
            This option provides elevator movement detection features
            through sensor monitoring and analysis.
        EOF
        
        # 设置所有配置文件权限
        sudo chmod 644 drivers/misc/mediatek/sensors-1.0/oplus_virtual_sensor/sensors/*/Kconfig

        # 创建 sensor/2.0 目录和配置文件
        echo "Setting up sensor 2.0 directories..."
        # 先删除可能存在的符号链接
        sudo rm -rf drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor || true
        # 创建父目录结构
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/ || true
        # 创建虚拟传感器目录
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/ || true
        # 创建子传感器目录
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/camera_protecthub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/free_fallhub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/pickup_detecthub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/fp_displayhub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/lux_aodhub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/pedo_minutehub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/oplus_activity_recognitionhub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/tp_gesturehub || true
        sudo mkdir -p drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/elevator_detecthub || true
        
        # 设置权限
        sudo chown -R runner:docker drivers/misc/mediatek/sensor/2.0/
        sudo chmod -R 755 drivers/misc/mediatek/sensor/2.0/

        # 创建主 Kconfig 文件
        sudo tee drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS virtual sensor configuration for sensor 2.0
        #
        
        config OPLUS_FEATURE_VIRTUAL_SENSOR
          bool "OPLUS virtual sensor support"
          default n
          help
            Enable virtual sensor feature for OPLUS device.
            This provides an integration point for various virtual
            sensors used in OPLUS devices.
            
        # Include sub-sensors configs
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/camera_protecthub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/free_fallhub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/pickup_detecthub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/fp_displayhub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/lux_aodhub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/pedo_minutehub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/oplus_activity_recognitionhub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/tp_gesturehub/Kconfig"
        source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/elevator_detecthub/Kconfig"
        EOF
        
        # 创建各个子传感器的 Kconfig 文件
        for sensor in camera_protecthub free_fallhub pickup_detecthub fp_displayhub lux_aodhub pedo_minutehub oplus_activity_recognitionhub tp_gesturehub elevator_detecthub; do
            sudo tee drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/${sensor}/Kconfig > /dev/null << EOF
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS ${sensor} configuration
        #
        
        config OPLUS_FEATURE_$(echo ${sensor} | tr 'a-z' 'A-Z' | sed 's/HUB//')
          bool "OPLUS ${sensor} support"
          default n
          help
            Enable ${sensor} support for OPLUS device.
            This option provides sensor functionality for OPLUS devices.
        EOF
        done
        
        # 设置所有配置文件权限
        sudo chmod 644 drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/Kconfig
        sudo chmod 644 drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/sensors/*/Kconfig

        # 创建传感器2.0主目录 Kconfig 引用
        sudo tee drivers/misc/mediatek/sensor/2.0/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # MediaTek sensor 2.0 configuration
        #
        
        config MTK_SENSOR_2_0
          bool "Support MediaTek sensor 2.0"
          default n
          help
            Support MediaTek sensors 2.0 framework.
            Set to yes if your platform supports
            sensor 2.0 framework, otherwise
            set to no.
        
        if MTK_SENSOR_2_0
          source "drivers/misc/mediatek/sensor/2.0/oplus_virtual_sensor/Kconfig"
        endif
        EOF
        
        sudo chmod 644 drivers/misc/mediatek/sensor/2.0/Kconfig

        # 创建 OPLUS 触摸屏目录和配置
        echo "Setting up OPLUS touchscreen..."
        sudo rm -rf drivers/input/touchscreen/oplus_touchscreen || true
        sudo mkdir -p drivers/input/touchscreen/oplus_touchscreen || true
        
        # 设置权限
        sudo chown -R runner:docker drivers/input/touchscreen/oplus_touchscreen
        sudo chmod -R 755 drivers/input/touchscreen/oplus_touchscreen
        
        # 创建主 Kconfig 文件
        sudo tee drivers/input/touchscreen/oplus_touchscreen/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS touchscreen configuration
        #
        
        config OPLUS_FEATURE_TOUCHSCREEN
          bool "OPLUS touchscreen support"
          default n
          help
            Enable OPLUS touchscreen support.
            This option provides touchscreen drivers
            and features specific to OPLUS devices.
            
        config TOUCHPANEL_OPLUS
          bool "OPLUS touchpanel driver"
          default n
          help
            Enable OPLUS touchpanel driver.
            This includes various touchscreen controllers
            used in OPLUS devices with custom features.
            
        config TOUCHPANEL_ALGORITHM
          bool "OPLUS touchpanel algorithm"
          default n
          depends on TOUCHPANEL_OPLUS
          help
            Enable touchscreen algorithm for OPLUS devices.
            This provides enhanced touch experience through
            software algorithms for touch processing.
        EOF
        
        sudo chmod 644 drivers/input/touchscreen/oplus_touchscreen/Kconfig

        # 创建 OPLUS 指纹驱动目录和配置
        echo "Setting up OPLUS fingerprint drivers..."
        sudo rm -rf drivers/input/oplus_fp_drivers || true
        sudo mkdir -p drivers/input/oplus_fp_drivers || true
        
        # 设置权限
        sudo chown -R runner:docker drivers/input/oplus_fp_drivers
        sudo chmod -R 755 drivers/input/oplus_fp_drivers
        
        # 创建 Kconfig 文件
        sudo tee drivers/input/oplus_fp_drivers/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS fingerprint drivers configuration
        #
        
        config OPLUS_FINGERPRINT
          bool "OPLUS fingerprint driver support"
          default n
          help
            Enable OPLUS fingerprint driver support.
            This option provides support for fingerprint
            sensors used in OPLUS devices.
            
        config OPLUS_FINGERPRINT_OPTICAL
          bool "OPLUS optical fingerprint support"
          default n
          depends on OPLUS_FINGERPRINT
          help
            Enable optical fingerprint sensor support
            for OPLUS devices with under-display
            optical fingerprint sensors.
            
        config OPLUS_FINGERPRINT_CAPACITIVE
          bool "OPLUS capacitive fingerprint support"
          default n
          depends on OPLUS_FINGERPRINT
          help
            Enable capacitive fingerprint sensor support
            for OPLUS devices with side-mounted or
            rear-mounted capacitive fingerprint sensors.
            
        config OPLUS_FINGERPRINT_GOODIX
          bool "Goodix fingerprint sensor support"
          default n
          depends on OPLUS_FINGERPRINT
          help
            Enable Goodix fingerprint sensor support for
            OPLUS devices using Goodix fingerprint sensors.
            
        config OPLUS_FINGERPRINT_FPC
          bool "FPC fingerprint sensor support"
          default n
          depends on OPLUS_FINGERPRINT
          help
            Enable FPC (Fingerprint Cards) sensor support
            for OPLUS devices using FPC fingerprint sensors.
        EOF
        
        sudo chmod 644 drivers/input/oplus_fp_drivers/Kconfig

        # 创建 OPLUS 安全驱动目录和配置
        echo "Setting up OPLUS secure drivers..."
        sudo rm -rf drivers/input/oplus_secure_drivers || true
        sudo mkdir -p drivers/input/oplus_secure_drivers || true
        
        # 设置权限
        sudo chown -R runner:docker drivers/input/oplus_secure_drivers
        sudo chmod -R 755 drivers/input/oplus_secure_drivers
        
        # 创建 Kconfig 文件
        sudo tee drivers/input/oplus_secure_drivers/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS secure drivers configuration
        #
        
        config OPLUS_SECURE_COMMON
          bool "OPLUS secure common driver"
          default n
          help
            Enable OPLUS secure common driver support.
            This provides common security functions
            for OPLUS devices.
            
        config OPLUS_SECURE_QCOM
          bool "OPLUS secure driver for Qualcomm platform"
          default n
          depends on OPLUS_SECURE_COMMON
          help
            Enable secure driver for Qualcomm platform.
            This provides security features specific
            to OPLUS devices with Qualcomm chipsets.
            
        config OPLUS_SECURE_MTK
          bool "OPLUS secure driver for MediaTek platform"
          default n
          depends on OPLUS_SECURE_COMMON
          help
            Enable secure driver for MediaTek platform.
            This provides security features specific
            to OPLUS devices with MediaTek chipsets.
            
        config OPLUS_SECURE_SECBOOT_STATUS
          bool "OPLUS secure boot status check"
          default n
          depends on OPLUS_SECURE_COMMON
          help
            Enable secure boot status checking.
            This provides secure boot verification and
            status reporting for OPLUS devices.
            
        config OPLUS_SECURE_FG_MEMMAP_WRITE
          bool "OPLUS secure fuel gauge memory map write"
          default n
          depends on OPLUS_SECURE_COMMON
          help
            Enable secure fuel gauge memory map write.
            This provides protection for fuel gauge
            memory map writing operations.
        EOF
        
        sudo chmod 644 drivers/input/oplus_secure_drivers/Kconfig

        # 创建OPLUS电源管理（采用不同的方法）
        echo "Setting up OPLUS power management (alternative approach)..."
        
        # 首先查看主Kconfig文件，看看它是如何包含oplus/Kconfig的
        grep -n "oplus/Kconfig" drivers/power/Kconfig || true
        
        # 创建完整的OPLUS电源管理目录结构
        rm -rf drivers/power/supply/oplus || true
        sudo mkdir -p drivers/power/supply/oplus || true
        sudo chown -R runner:docker drivers/power/supply/oplus
        sudo chmod -R 755 drivers/power/supply/oplus
        
        # 创建Kconfig和Makefile文件
        sudo tee drivers/power/supply/oplus/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS power management configuration
        #
        
        config OPLUS_FEATURE_CHG_BASIC
          bool "OPLUS charging system"
          default n
          help
            Enable OPLUS charging system support.
            This provides charging drivers and features
            specific to OPLUS devices.
        
        config OPLUS_CHARGER
          bool "OPLUS charger driver"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable OPLUS charger driver.
            This includes various charger controller designs
            used in OPLUS devices.
        
        config OPLUS_CHIP_SOC_NODE
          bool "OPLUS chip SOC node"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable chip SOC node for OPLUS devices.
            This option provides information about the SOC
            of the OPLUS chip through sysfs.
        
        config OPLUS_SHORT_C_BATT_CHECK
          bool "OPLUS short circuit battery check"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable short circuit battery checking for OPLUS devices.
            This feature helps to detect and handle battery
            short circuit conditions.
            
        config OPLUS_SMART_CHARGER_SUPPORT
          bool "OPLUS smart charger support"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable smart charger support for OPLUS devices.
            This feature provides intelligent charging algorithms
            to optimize battery life and charging speed.
            
        config OPLUS_SHORT_HW_CHECK
          bool "OPLUS short hardware check"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable short hardware checking for OPLUS devices.
            This feature helps to detect and handle hardware
            short circuit conditions.
            
        config OPLUS_DUAL_CHARGER_SUPPORT
          bool "OPLUS dual charger support"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable dual charger support for OPLUS devices.
            This feature allows using two charging ICs
            simultaneously for faster charging.
            
        config OPLUS_CALL_MODE_SUPPORT
          bool "OPLUS call mode charging support"
          default n
          depends on OPLUS_FEATURE_CHG_BASIC
          help
            Enable call mode support for OPLUS devices.
            This feature adjusts charging behavior during
            phone calls to reduce heat generation.
        EOF
        
        sudo chmod 644 drivers/power/supply/oplus/Kconfig
        
        # 创建必要的power/oplus目录（但作为供电目录的链接）
        sudo rm -rf drivers/power/oplus || true
        sudo mkdir -p drivers/power/oplus || true
        sudo chown -R runner:docker drivers/power/oplus
        sudo chmod -R 755 drivers/power/oplus
        
        # 复制Kconfig文件到power/oplus目录
        sudo cp drivers/power/supply/oplus/Kconfig drivers/power/oplus/Kconfig
        sudo chmod 644 drivers/power/oplus/Kconfig
        
        # 调试输出
        echo "Created OPLUS power management directories and files:"
        ls -la drivers/power/oplus/ || true
        ls -la drivers/power/supply/oplus/ || true
        
        # 修改主power Kconfig文件以避免包含缺失的文件
        echo "Modifying main power Kconfig file..."
        POWER_KCONFIG="drivers/power/Kconfig"
        if [ -f "$POWER_KCONFIG" ]; then
          # 备份原始文件
          cp $POWER_KCONFIG ${POWER_KCONFIG}.bak
          
          # 查找并注释掉对oplus/Kconfig的引用行
          # 这行通常看起来像: source "drivers\/power\/oplus\/Kconfig"
          sudo sed -i 's/source "drivers\/power\/oplus\/Kconfig"/#source "drivers\/power\/oplus\/Kconfig" # commented for build/g' $POWER_KCONFIG
          
          # 确认更改
          echo "Modified $POWER_KCONFIG:"
          grep -n "oplus/Kconfig" $POWER_KCONFIG || true
          
          echo "Difference between original and modified file:"
          diff ${POWER_KCONFIG}.bak $POWER_KCONFIG || true
        else
          echo "Warning: $POWER_KCONFIG does not exist"
        fi
        
        # 创建批量处理Kconfig缺失的函数
        echo "Setting up automatic Kconfig error handler..."
        create_kconfig_template() {
          local kconfig_path=$1
          local dir_path=$(dirname "$kconfig_path")
          
          echo "Creating directory and Kconfig for: $kconfig_path"
          sudo mkdir -p "$dir_path"
          sudo chown -R runner:docker "$dir_path"
          sudo chmod -R 755 "$dir_path"
          
          # 创建一个简单的Kconfig模板
          sudo tee "$kconfig_path" > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # Auto-generated Kconfig file for build
        # This file was automatically created to fix build errors
        #
        
        # Empty configuration to satisfy build dependencies
        EOF
          
          sudo chmod 644 "$kconfig_path"
          echo "Created $kconfig_path successfully"
        }
        
        # 为了防止还有其他缺失的Kconfig文件，让我们检查一些常见的OPLUS组件
        OPLUS_COMPONENTS=(
          "drivers/power/oplus"
          "drivers/power/supply/oplus"
          "drivers/misc/mediatek/ccu/src/2.1/ccu_ext_interface"
          "drivers/misc/mediatek/imgsensor/src/mt6873/camera_project/k6873v1_64"
          "drivers/misc/mediatek/memory-ssmr/met_memory_utils"
          "drivers/misc/mediatek/performance/fpsgo_v3/fbt_cpu"
          "drivers/misc/mediatek/geniezone"
          "drivers/misc/mediatek/nand"
          "drivers/misc/mediatek/connectivity/common"
          "drivers/misc/mediatek/performance/boost_ctrl"
          "drivers/misc/mediatek/memory-amms"
          "drivers/misc/mediatek/ext_gic"
          "drivers/misc/mediatek/mmp"
          "drivers/misc/mediatek/apusys"
          "drivers/misc/mediatek/vpu"
          "drivers/misc/mediatek/mdla"
          "drivers/misc/mediatek/vibrator"
          "drivers/misc/mediatek/ccu"
          "drivers/misc/mediatek/ext_gic"
          "drivers/misc/oplus"
        )
        
        # 为每个组件创建Kconfig文件，如果目录不存在的话
        for component in "${OPLUS_COMPONENTS[@]}"; do
          kconfig_path="${component}/Kconfig"
          if [ ! -f "$kconfig_path" ]; then
            create_kconfig_template "$kconfig_path"
          fi
        done

        # 处理音频编解码器的Kconfig
        echo "Setting up audio codec configuration..."
        sudo rm -rf sound/soc/codecs/audio || true
        sudo mkdir -p sound/soc/codecs/audio || true
        sudo chown -R runner:docker sound/soc/codecs/audio
        sudo chmod -R 755 sound/soc/codecs/audio
        
        # 创建音频编解码器Kconfig文件
        sudo tee sound/soc/codecs/audio/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS audio codec configuration
        #
        
        config SND_SOC_OPLUS_CODEC_AUDIO
          bool "OPLUS Audio codec support"
          default n
          help
            Enable OPLUS audio codec support.
            This enables audio codec drivers specific to OPLUS devices.
            
        config SND_SOC_OPLUS_PA_MANAGER
          bool "OPLUS audio PA manager"
          default n
          depends on SND_SOC_OPLUS_CODEC_AUDIO
          help
            Enable OPLUS audio PA manager.
            This enables power amplifier management
            for OPLUS audio subsystem.
            
        config SND_SOC_TFA98XX_OPLUS
          bool "NXP TFA98XX codec support for OPLUS"
          default n
          depends on SND_SOC_OPLUS_CODEC_AUDIO
          help
            Enable NXP TFA98XX codec support customized for OPLUS devices.
            This enables the TFA98XX codec driver with
            OPLUS-specific modifications.
            
        config SND_SOC_AW87339_OPLUS
          bool "AWINIC AW87339 codec support for OPLUS"
          default n
          depends on SND_SOC_OPLUS_CODEC_AUDIO
          help
            Enable AWINIC AW87339 codec support customized for OPLUS devices.
            This enables the AW87339 codec driver with
            OPLUS-specific modifications.
        EOF
        
        sudo chmod 644 sound/soc/codecs/audio/Kconfig
        
        # 将 sound/soc/codecs/audio/Kconfig 添加到自动处理列表中
        OPLUS_COMPONENTS+=("sound/soc/codecs/audio")

        # 创建 oplus lowmem_dbg 目录和 Kconfig
        echo "Setting up OPLUS lowmem_dbg..."
        sudo rm -rf drivers/soc/oplus/lowmem_dbg || true
        sudo mkdir -p drivers/soc/oplus/lowmem_dbg || true
        sudo chown -R runner:docker drivers/soc/oplus/lowmem_dbg
        sudo chmod -R 755 drivers/soc/oplus/lowmem_dbg
        
        # 创建 Kconfig 文件
        sudo tee drivers/soc/oplus/lowmem_dbg/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS low memory debug configuration
        #
        
        config OPLUS_FEATURE_LOWMEM_DBG
          bool "OPLUS low memory debug support"
          default n
          help
            Enable OPLUS low memory debug support.
            This option provides debugging mechanisms for 
            low memory situations on OPLUS devices.
            
        config OPLUS_FEATURE_LAST_KMSG
          bool "OPLUS last kernel message"
          default n
          depends on OPLUS_FEATURE_LOWMEM_DBG
          help
            Enable OPLUS last kernel message feature.
            This preserves the last kernel messages for 
            debugging after system crashes.
        
        config OPLUS_FEATURE_EMMC_DRIVER
          bool "OPLUS EMMC driver special for lowmem"
          default n
          depends on OPLUS_FEATURE_LOWMEM_DBG
          help
            Enable OPLUS EMMC driver special features
            for low memory conditions.
        EOF
        
        sudo chmod 644 drivers/soc/oplus/lowmem_dbg/Kconfig
        
        # 创建iomonitor目录和Kconfig
        echo "Setting up OPLUS iomonitor..."
        sudo rm -rf drivers/soc/oplus/iomonitor || true
        sudo mkdir -p drivers/soc/oplus/iomonitor || true
        sudo chown -R runner:docker drivers/soc/oplus/iomonitor
        sudo chmod -R 755 drivers/soc/oplus/iomonitor
        
        # 创建 Kconfig 文件
        sudo tee drivers/soc/oplus/iomonitor/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS IO monitoring configuration
        #
        
        config OPLUS_FEATURE_IOMONITOR
          bool "OPLUS IO monitoring support"
          default n
          help
            Enable OPLUS IO monitoring support.
            This option provides IO operation monitoring and
            analysis for system performance debugging.
            
        config OPLUS_FEATURE_IOMONITOR_CLEANUP
          bool "OPLUS IO monitor cleanup"
          default n
          depends on OPLUS_FEATURE_IOMONITOR
          help
            Enable IO monitor cleanup mechanism.
            This option helps manage resource cleanup
            for the IO monitoring subsystem.
        
        config OPLUS_FEATURE_IOMONITOR_DETECT
          bool "OPLUS IO monitor detection"
          default n
          depends on OPLUS_FEATURE_IOMONITOR
          help
            Enable IO monitoring detection.
            This allows detecting problematic IO patterns
            and provides diagnostic information.
        EOF
        
        sudo chmod 644 drivers/soc/oplus/iomonitor/Kconfig
        
        # 创建 svelte 目录和 Kconfig
        echo "Setting up OPLUS svelte..."
        sudo rm -rf drivers/soc/oplus/svelte || true
        sudo mkdir -p drivers/soc/oplus/svelte || true
        sudo chown -R runner:docker drivers/soc/oplus/svelte
        sudo chmod -R 755 drivers/soc/oplus/svelte
        
        # 创建 Kconfig 文件
        sudo tee drivers/soc/oplus/svelte/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS Svelte performance configuration
        #
        
        config OPLUS_FEATURE_SVELTE
          bool "OPLUS Svelte performance optimization"
          default n
          help
            Enable OPLUS Svelte performance optimization.
            This option provides lightweight performance
            optimization and monitoring for OPLUS devices.
            
        config OPLUS_FEATURE_SVELTE_MOONLIGHT
          bool "OPLUS Svelte Moonlight mode"
          default n
          depends on OPLUS_FEATURE_SVELTE
          help
            Enable Svelte Moonlight mode for OPLUS devices.
            This provides power-saving optimization for
            background tasks and system services.
        
        config OPLUS_FEATURE_SVELTE_LOGGER
          bool "OPLUS Svelte Logger"
          default n
          depends on OPLUS_FEATURE_SVELTE
          help
            Enable Svelte Logger for OPLUS devices.
            This provides performance and resource usage logging
            for analyzing system behavior.
            
        config OPLUS_FEATURE_SVELTE_TASKMONITOR
          bool "OPLUS Svelte Task Monitor"
          default n
          depends on OPLUS_FEATURE_SVELTE
          help
            Enable Svelte Task Monitor for OPLUS devices.
            This provides real-time monitoring of task scheduling
            and resource consumption.
        EOF
        
        sudo chmod 644 drivers/soc/oplus/svelte/Kconfig
        
        # 创建 system 目录和 Kconfig
        echo "Setting up OPLUS system..."
        sudo rm -rf drivers/soc/oplus/system || true
        sudo mkdir -p drivers/soc/oplus/system || true
        sudo chown -R runner:docker drivers/soc/oplus/system
        sudo chmod -R 755 drivers/soc/oplus/system
        
        # 创建 Kconfig 文件
        sudo tee drivers/soc/oplus/system/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS System configuration
        #
        
        config OPLUS_SYSTEM_KERNEL
          bool "OPLUS system kernel features"
          default n
          help
            Enable OPLUS system kernel features.
            This option provides basic system features
            for OPLUS devices.
            
        config OPLUS_FEATURE_PHOENIX
          bool "OPLUS Phoenix system recovery"
          default n
          depends on OPLUS_SYSTEM_KERNEL
          help
            Enable Phoenix system recovery for OPLUS devices.
            This system helps recover from system hangs and crashes.
        
        config OPLUS_FEATURE_PMIC_MONITOR
          bool "OPLUS PMIC monitoring"
          default n
          depends on OPLUS_SYSTEM_KERNEL
          help
            Enable PMIC monitoring for OPLUS devices.
            This monitors power management IC status and activities.
            
        config OPLUS_FEATURE_HUNG_TASK_ENHANCE
          bool "OPLUS hung task enhancement"
          default n
          depends on OPLUS_SYSTEM_KERNEL
          help
            Enable hung task enhancement for OPLUS devices.
            This provides better detection and handling of system
            processes that become unresponsive.
            
        config OPLUS_FEATURE_SHUTDOWN_DETECT
          bool "OPLUS shutdown detection"
          default n
          depends on OPLUS_SYSTEM_KERNEL
          help
            Enable shutdown detection for OPLUS devices.
            This detects abnormal shutdown sequences and logs them.
        EOF
        
        sudo chmod 644 drivers/soc/oplus/system/Kconfig
        
        # 确保主目录Kconfig引用了system
        if [ -f drivers/soc/oplus/Kconfig ]; then
          # 检查是否已经包含了system
          if ! grep -q "system/Kconfig" drivers/soc/oplus/Kconfig; then
            # 添加引用到现有文件
            sudo sed -i '/SPDX-License-Identifier/a source "drivers\/soc\/oplus\/system\/Kconfig"' drivers/soc/oplus/Kconfig
          fi
        else
          # 创建新的Kconfig文件
          sudo tee drivers/soc/oplus/Kconfig > /dev/null << 'EOF'
        # SPDX-License-Identifier: GPL-2.0
        #
        # OPLUS SoC drivers configuration
        #
        
        source "drivers/soc/oplus/system/Kconfig"
        source "drivers/soc/oplus/svelte/Kconfig"
        source "drivers/soc/oplus/iomonitor/Kconfig"
        source "drivers/soc/oplus/lowmem_dbg/Kconfig"
        EOF
          
          sudo chmod 644 drivers/soc/oplus/Kconfig
        fi

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        if [ ! -z ${{ env.KSU_EXPECTED_SIZE }} ] && [ ! -z ${{ env.KSU_EXPECTED_HASH }} ]; then
          export KSU_EXPECTED_SIZE=${{ env.KSU_EXPECTED_SIZE }}
          export KSU_EXPECTED_HASH=${{ env.KSU_EXPECTED_HASH }}
        fi
        make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }} ${{ env.KERNEL_CONFIG }}
        if [ ${{ env.ENABLE_CCACHE }} = true ]; then
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}
        else
            make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} ${{ env.CUSTOM_CMDS }} ${{ env.EXTRA_CMDS }} ${{ env.GCC_64 }} ${{ env.GCC_32 }}
        fi

    - name: Check a kernel output files
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
           echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
       else
           echo "Kernel output file is empty"
           exit 1
       fi
       if [ ${{ env.NEED_DTBO }} = true ]; then
           if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img ]; then
               echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
           else
               echo "DTBO image is empty"
               exit 1
           fi
       fi

    - name: Make Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true' && env.USE_CUSTOM_ANYKERNEL3 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
            cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
        fi
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make Custom-Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true' && env.USE_CUSTOM_ANYKERNEL3 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} == *'.tar.gz' ]]; then
                wget -O AnyKernel3.tar.gz ${{ env.CUSTOM_ANYKERNEL3_SOURCE }}
                mkdir AnyKernel3
                tar -C AnyKernel3/ -zxvf AnyKernel3.tar.gz
            else
                git clone ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} -b ${{ env.CUSTOM_ANYKERNEL3_BRANCH }} --depth=1 AnyKernel3
            fi
        else
            wget -O AnyKernel3.zip ${{ env.CUSTOM_ANYKERNEL3_SOURCE }}
            mkdir AnyKernel3
            unzip AnyKernel3.zip -d AnyKernel3/
        fi
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
            cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
        fi
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make boot image
      if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi

    - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_IMAGE_NAME }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

    - name: Upload AnyKernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*

    - name: Upload DTBO image
      if: env.CHECK_DTBO_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img

    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: boot${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot.img
