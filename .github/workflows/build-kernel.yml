name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
    - uses: actions/checkout@v4
    - name: Prepare Configuration
      run: |
        CONFIG_ENV=$(grep -w "CONFIG_ENV" config.env | head -n 1 | cut -d "=" -f 2)
        CONFIG_LIST=(
            KERNEL_SOURCE
            KERNEL_SOURCE_BRANCH
            KERNEL_CONFIG
            KERNEL_IMAGE_NAME
            ARCH
            ADD_LOCALVERSION_TO_FILENAME
            EXTRA_CMDS
            USE_CUSTOM_CLANG
            CUSTOM_CLANG_SOURCE
            CUSTOM_CLANG_BRANCH
            CUSTOM_CMDS
            CLANG_BRANCH
            CLANG_VERSION
            ENABLE_GCC_ARM64
            ENABLE_GCC_ARM32
            USE_CUSTOM_GCC_64
            CUSTOM_GCC_64_SOURCE
            CUSTOM_GCC_64_BRANCH
            CUSTOM_GCC_64_BIN
            USE_CUSTOM_GCC_32
            CUSTOM_GCC_32_SOURCE
            CUSTOM_GCC_32_BRANCH
            CUSTOM_GCC_32_BIN
            ENABLE_KERNELSU
            KERNELSU_TAG
            ADD_KPROBES_CONFIG
            DISABLE-LTO
            ADD_OVERLAYFS_CONFIG
            DISABLE_CC_WERROR
            APPLY_KSU_PATCH
            USE_CUSTOM_ANYKERNEL3
            CUSTOM_ANYKERNEL3_SOURCE
            CUSTOM_ANYKERNEL3_BRANCH
            ENABLE_CCACHE
            NEED_DTBO
            BUILD_BOOT_IMG
            SOURCE_BOOT_IMAGE
            KSU_EXPECTED_SIZE
            KSU_EXPECTED_HASH
            REMOVE_UNUSED_PACKAGES
        )

        for CONFIG in "${CONFIG_LIST[@]}"; do
            if [[ "$CONFIG" == "EXTRA_CMDS" || "$CONFIG" == "CUSTOM_CMDS" ]]; then
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV
            else
                echo "$CONFIG=$(grep -w "$CONFIG" "$CONFIG_ENV" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
            fi
        done

    - name: Remove unused packages
      if: env.REMOVE_UNUSED_PACKAGES == 'true'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: false
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: false

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_CONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        # 安装必要的依赖包
        sudo apt-get install -y git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3
        
        # 增加编译工具链依赖
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi 
        
        # 删除可能冲突的包
        sudo apt-get remove -y 'php.*' || echo "::warning::PHP移除命令失败，但会继续执行"
        
        # 查看系统信息
        echo "系统信息:"
        uname -a
        gcc --version
        
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: Download Clang-aosp
      if: env.USE_CUSTOM_CLANG != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/${{ env.CLANG_BRANCH }}/clang-${{ env.CLANG_VERSION }}.tar.gz
        tar -C clang-aosp/ -zxvf clang-${{ env.CLANG_VERSION }}.tar.gz

    - name: Download Custom-Clang
      if: env.USE_CUSTOM_CLANG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir -p clang-aosp
        CLANG_URL="${{ env.CUSTOM_CLANG_SOURCE }}"
        
        if [[ $CLANG_URL == *.tar.gz ]]; then
            wget -O clang.tar.gz "$CLANG_URL"
            tar -C clang-aosp/ -zxvf clang.tar.gz
        elif [[ $CLANG_URL == *.tar.xz ]]; then
            wget -O clang.tar.xz "$CLANG_URL"
            tar -C clang-aosp/ -Jxvf clang.tar.xz
            # 检查并修复路径结构
            if [ -d "clang-aosp/LLVM-"* ]; then
                LLVM_DIR=$(find clang-aosp -maxdepth 1 -type d -name "LLVM-*" | head -n 1)
                if [ -n "$LLVM_DIR" ]; then
                    echo "正在修复Clang工具路径..."
                    # 移动bin目录内容到clang-aosp/bin
                    mkdir -p clang-aosp/bin
                    cp -r $LLVM_DIR/bin/* clang-aosp/bin/
                    # 移动lib目录内容到clang-aosp/lib
                    mkdir -p clang-aosp/lib
                    cp -r $LLVM_DIR/lib/* clang-aosp/lib/
                    # 移动include目录内容到clang-aosp/include
                    if [ -d "$LLVM_DIR/include" ]; then
                        mkdir -p clang-aosp/include
                        cp -r $LLVM_DIR/include/* clang-aosp/include/
                    fi
                fi
            fi
        elif [[ $CLANG_URL == *.zip ]]; then
            wget -O clang.zip "$CLANG_URL"
            unzip clang.zip -d clang-aosp/
        elif [[ $CLANG_URL == *github.com* ]] && [[ $CLANG_URL != *"/releases/"* ]]; then
            # 只有当URL指向GitHub仓库而不是releases文件时才使用git克隆
            git clone "$CLANG_URL" -b ${{ env.CUSTOM_CLANG_BRANCH }} clang-aosp --depth=1
        else
            # 默认尝试使用wget下载
            FILENAME=$(basename "$CLANG_URL")
            wget -O "$FILENAME" "$CLANG_URL"
            
            if [[ $FILENAME == *.tar.gz ]]; then
                tar -C clang-aosp/ -zxvf "$FILENAME"
            elif [[ $FILENAME == *.tar.xz ]]; then
                tar -C clang-aosp/ -Jxvf "$FILENAME"
                # 检查并修复路径结构 
                if [ -d "clang-aosp/LLVM-"* ]; then
                    LLVM_DIR=$(find clang-aosp -maxdepth 1 -type d -name "LLVM-*" | head -n 1)
                    if [ -n "$LLVM_DIR" ]; then
                        echo "正在修复Clang工具路径..."
                        # 移动bin目录内容到clang-aosp/bin
                        mkdir -p clang-aosp/bin
                        cp -r $LLVM_DIR/bin/* clang-aosp/bin/
                        # 移动lib目录内容到clang-aosp/lib
                        mkdir -p clang-aosp/lib
                        cp -r $LLVM_DIR/lib/* clang-aosp/lib/
                        # 移动include目录内容到clang-aosp/include
                        if [ -d "$LLVM_DIR/include" ]; then
                            mkdir -p clang-aosp/include
                            cp -r $LLVM_DIR/include/* clang-aosp/include/
                        fi
                    fi
                fi
            elif [[ $FILENAME == *.zip ]]; then
                unzip "$FILENAME" -d clang-aosp/
            else
                echo "未知文件类型，尝试作为tar.xz处理"
                tar -C clang-aosp/ -Jxvf "$FILENAME" || echo "解压失败，可能需要手动检查"
            fi
        fi
        
        # 确保二进制文件可执行
        if [ -d "clang-aosp/bin" ]; then
            chmod +x clang-aosp/bin/*
        fi
        
        # 列出clang-aosp目录内容
        echo "检查clang-aosp目录结构："
        ls -la clang-aosp/
        if [ -d "clang-aosp/bin" ]; then
            echo "检查clang-aosp/bin目录内容："
            ls -la clang-aosp/bin/
        fi

    - name: Download Gcc-aosp
      if: env.USE_CUSTOM_GCC_64 != 'true' || env.USE_CUSTOM_GCC_32 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.ENABLE_GCC_ARM64 }} = true ]; then
            mkdir gcc-64
            wget -O gcc-aarch64.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-64/ -zxvf gcc-aarch64.tar.gz
            echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/aarch64-linux-android-" >> $GITHUB_ENV
        fi

        if [ ${{ env.ENABLE_GCC_ARM32 }} = true ]; then
            mkdir gcc-32
            wget -O gcc-arm.tar.gz https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/refs/tags/android-12.1.0_r27.tar.gz
            tar -C gcc-32/ -zxvf gcc-arm.tar.gz
            echo "GCC_32=CROSS_COMPILE_ARM32=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/arm-linux-androideabi-" >> $GITHUB_ENV
        fi

    - name: Download Custom-Gcc
      if: env.USE_CUSTOM_GCC_64 == 'true' || env.USE_CUSTOM_GCC_32 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ ${{ env.USE_CUSTOM_GCC_64 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_64_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-64.tar.gz ${{ env.CUSTOM_GCC_64_SOURCE }}
                mkdir gcc-64
                tar -C gcc-64/ -zxvf gcc-64.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_64_SOURCE }} -b ${{ env.CUSTOM_GCC_64_BRANCH }} gcc-64 --depth=1
              fi
          else
              wget -O gcc-64.zip ${{ env.CUSTOM_GCC_64_SOURCE }}
              mkdir gcc-64
              unzip gcc-64.zip -d gcc-64/
          fi
          echo "GCC_64=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-64/bin/${{ env.CUSTOM_GCC_64_BIN }}" >> $GITHUB_ENV
        fi

        if [ ${{ env.USE_CUSTOM_GCC_32 }} = true ]; then
          if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} =~ git ]]; then
              if [[ ${{ env.CUSTOM_GCC_32_SOURCE }} == *'.tar.gz' ]]; then
                wget -O gcc-32.tar.gz ${{ env.CUSTOM_GCC_32_SOURCE }}
                mkdir gcc-32
                tar -C gcc-32/ -zxvf gcc-32.tar.gz
              else
                git clone ${{ env.CUSTOM_GCC_32_SOURCE }} -b ${{ env.CUSTOM_GCC_32_BRANCH }} gcc-32 --depth=1
              fi
          else
            wget -O gcc-32.zip ${{ env.CUSTOM_GCC_32_SOURCE }}
            mkdir gcc-32
            unzip gcc-32.zip -d gcc-32/
          fi
          echo "GCC_32=CROSS_COMPILE=$GITHUB_WORKSPACE/kernel_workspace/gcc-32/bin/${{ env.CUSTOM_GCC_32_BIN }}" >> $GITHUB_ENV
        fi

    - name: Download mkbootimg tools
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1
        if [[ ${{ env.ADD_LOCALVERSION_TO_FILENAME }} == 'true' ]]; then
          echo "LOCALVERSION=$(cat android-kernel/localversion)" >> $GITHUB_ENV
        else
          echo "LOCALVERSION=" >> $GITHUB_ENV
        fi

    - name: Download source boot image
      if: env.BUILD_BOOT_IMG == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O boot-source.img ${{ env.SOURCE_BOOT_IMAGE }}
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi

    - name: Setup KernelSU
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count HEAD) + 10200)
        echo "UPLOADNAME=-KernelSU_$KSU_VERSION" >> $GITHUB_ENV

    - name: Setup Configuration for Kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        if [ ${{ env.APPLY_KSU_PATCH }} = true ]; then
            bash $GITHUB_WORKSPACE/patches/patches.sh
            if grep -q "CONFIG_KSU" arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}; then
                sed -i 's/# CONFIG_KSU is not set/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
                sed -i 's/CONFIG_KSU=n/CONFIG_KSU=y/g' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            else
                echo "CONFIG_KSU=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            fi
        fi
        if [ ${{ env.ADD_KPROBES_CONFIG }} = true -a ${{ env.APPLY_KSU_PATCH }} != true ]; then
            echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.ADD_OVERLAYFS_CONFIG }} = true ]; then
            echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE-LTO }} = true ]; then
            sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
            echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi
        if [ ${{ env.DISABLE_CC_WERROR }} = true ]; then
            echo "CONFIG_CC_WERROR=n" >> arch/${{ env.ARCH }}/configs/${{ env.KERNEL_CONFIG }}
        fi

    - name: Setup ccache
      if: env.ENABLE_CCACHE == 'true'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-${{ env.DEVICE }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}
        max-size: 2G

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # 显示环境变量和工具路径
        echo "检查工具链位置:"
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        which clang
        which ld.lld
        which llvm-as
        
        # 创建临时目录用于存放拦截脚本
        mkdir -p $GITHUB_WORKSPACE/bin_intercept
        
        # 创建一个脚本拦截as调用，重定向到llvm-as
        cat << 'EOF' > $GITHUB_WORKSPACE/bin_intercept/as
        #!/bin/bash
        CLANG_BIN=$(which clang)
        echo "Intercepted as call with args: $@" >&2

        # 更兼容的数组处理方式
        args=()
        gnu_specific=0

        # 打印所有参数进行调试
        echo "原始参数列表:" >&2
        for i in "$@"; do
          echo "  - $i" >&2
        done

        # 处理参数，移除GNU as特有的参数
        for arg in "$@"; do
          case "$arg" in
            "--64")
              echo "移除GNU特有参数: --64" >&2
              gnu_specific=1
              ;;
            "-EL")
              echo "移除GNU特有参数: -EL" >&2
              gnu_specific=1
              ;;
            *)
              args+=("$arg")
              ;;
          esac
        done

        # 输出处理后的参数列表
        echo "处理后的参数列表:" >&2
        for i in "${args[@]}"; do
          echo "  - $i" >&2
        done

        # 检测是否为汇编文件
        is_assembly=0
        for arg in "$@"; do
          if [[ "$arg" == *.s ]]; then
            is_assembly=1
            echo "检测到汇编文件: $arg" >&2
            break
          fi
        done

        # 基于检测结果执行clang
        if [ $is_assembly -eq 1 ] || [ $gnu_specific -eq 1 ]; then
          echo "使用clang处理汇编文件: $CLANG_BIN -c -integrated-as ${args[@]}" >&2
          $CLANG_BIN -c -integrated-as "${args[@]}"
        else
          echo "使用clang处理普通文件: $CLANG_BIN -c ${args[@]}" >&2
          $CLANG_BIN -c "${args[@]}"
        fi
        EOF
        
        chmod +x $GITHUB_WORKSPACE/bin_intercept/as
        
        # 将拦截目录放在PATH最前面
        export PATH=$GITHUB_WORKSPACE/bin_intercept:$PATH
        
        # 配置编译环境
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z)
        
        # 强制使用LLVM工具链
        export CONFIG_LLVM_POLLY=y  # 启用Polly优化
        export LLVM=1
        export LLVM_IAS=1
        
        # 清理工作区
        echo "清理内核工作区..."
        make ARCH=${{ env.ARCH }} mrproper
        
        # 验证目录状态
        echo "检查目录状态:"
        ls -la
        
        # 禁用CONFIG_AS_HAS_ARMV8_4
        echo "CONFIG_AS_HAS_ARMV8_4=n" >> .config
        
        # 设置交叉编译前缀
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
        
        # 额外的编译器标志
        export KBUILD_CFLAGS="-integrated-as"
        export KCFLAGS="-integrated-as"
        
        if [ ! -z ${{ env.KSU_EXPECTED_SIZE }} ] && [ ! -z ${{ env.KSU_EXPECTED_HASH }} ]; then
          export KSU_EXPECTED_SIZE=${{ env.KSU_EXPECTED_SIZE }}
          export KSU_EXPECTED_HASH=${{ env.KSU_EXPECTED_HASH }}
        fi
        
        echo "开始配置内核..."
        make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          LD=ld.lld \
          AR=llvm-ar \
          NM=llvm-nm \
          OBJCOPY=llvm-objcopy \
          OBJDUMP=llvm-objdump \
          STRIP=llvm-strip \
          AS=llvm-as \
          ${{ env.GCC_64 }} \
          ${{ env.GCC_32 }} \
          ${{ env.KERNEL_CONFIG }}
        
        # 设置AS无需ARMV8_4支持
        echo "CONFIG_AS_HAS_ARMV8_4=n" >> out/.config
        grep -q CONFIG_AS_HAS_ARMV8_4 out/.config || echo "CONFIG_AS_HAS_ARMV8_4=n" >> out/.config
        
        # 验证配置结果
        echo "检查配置文件是否正确设置:"
        grep "CONFIG_AS_HAS_ARMV8_4" out/.config || echo "未找到CONFIG_AS_HAS_ARMV8_4配置项"
        
        # 再次运行配置以确保所有选项生效
        make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} \
          oldconfig
        
        echo "开始编译内核..."
        if [ ${{ env.ENABLE_CCACHE }} = true ]; then
            make -j$(nproc --all) CC="ccache clang" O=out ARCH=${{ env.ARCH }} \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              STRIP=llvm-strip \
              AS=llvm-as \
              KCFLAGS="$KCFLAGS" \
              KBUILD_CFLAGS="$KBUILD_CFLAGS" \
              ${{ env.GCC_64 }} \
              ${{ env.GCC_32 }} \
              V=1
        else
            make -j$(nproc --all) CC=clang O=out ARCH=${{ env.ARCH }} \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              STRIP=llvm-strip \
              AS=llvm-as \
              KCFLAGS="$KCFLAGS" \
              KBUILD_CFLAGS="$KBUILD_CFLAGS" \
              ${{ env.GCC_64 }} \
              ${{ env.GCC_32 }} \
              V=1
        fi

    - name: Check a kernel output files
      run: |
       cd $GITHUB_WORKSPACE/kernel_workspace
       if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} ]; then
           echo "CHECK_FILE_IS_OK=true" >> $GITHUB_ENV
       else
           echo "Kernel output file is empty"
           exit 1
       fi
       if [ ${{ env.NEED_DTBO }} = true ]; then
           if [ -f android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img ]; then
               echo "CHECK_DTBO_IS_OK=true" >> $GITHUB_ENV
           else
               echo "DTBO image is empty"
               exit 1
           fi
       fi

    - name: Make Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true' && env.USE_CUSTOM_ANYKERNEL3 != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3 --depth=1 AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!BLOCK=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!BLOCK=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/IS_SLOT_DEVICE=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
            cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
        fi
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make Custom-Anykernel3
      if: env.CHECK_FILE_IS_OK == 'true' && env.USE_CUSTOM_ANYKERNEL3 == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [[ ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} =~ git ]]; then
            if [[ ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} == *'.tar.gz' ]]; then
                wget -O AnyKernel3.tar.gz ${{ env.CUSTOM_ANYKERNEL3_SOURCE }}
                mkdir AnyKernel3
                tar -C AnyKernel3/ -zxvf AnyKernel3.tar.gz
            else
                git clone ${{ env.CUSTOM_ANYKERNEL3_SOURCE }} -b ${{ env.CUSTOM_ANYKERNEL3_BRANCH }} --depth=1 AnyKernel3
            fi
        else
            wget -O AnyKernel3.zip ${{ env.CUSTOM_ANYKERNEL3_SOURCE }}
            mkdir AnyKernel3
            unzip AnyKernel3.zip -d AnyKernel3/
        fi
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} AnyKernel3/
        if [ ${{ env.CHECK_DTBO_IS_OK }} = true ]; then
            cp android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img AnyKernel3/
        fi
        rm -rf AnyKernel3/.git* AnyKernel3/README.md

    - name: Make boot image
      if: env.HAVE_SOURCE_BOOT_IMAGE == 'true' && env.CHECK_FILE_IS_OK == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }} out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi

    - name: Upload ${{ env.KERNEL_IMAGE_NAME }}
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.KERNEL_IMAGE_NAME }}${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/${{ env.KERNEL_IMAGE_NAME }}

    - name: Upload AnyKernel3
      if: env.CHECK_FILE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AnyKernel3${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*

    - name: Upload DTBO image
      if: env.CHECK_DTBO_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: dtbo-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/android-kernel/out/arch/${{ env.ARCH }}/boot/dtbo.img

    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: boot${{ env.LOCALVERSION }}${{ env.UPLOADNAME }}-${{ env.DEVICE }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/boot.img
